{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9788132,"sourceType":"datasetVersion","datasetId":5997422}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Supervised HMM ","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-11-03T20:17:58.241976Z","iopub.execute_input":"2024-11-03T20:17:58.242419Z","iopub.status.idle":"2024-11-03T20:18:12.637141Z","shell.execute_reply.started":"2024-11-03T20:17:58.242378Z","shell.execute_reply":"2024-11-03T20:18:12.635919Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"import json\nwith open(\"/kaggle/input/cve-1-0/labeled_dataset.json\", \"r\") as f: dataset = json.load(f)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T20:18:12.639027Z","iopub.execute_input":"2024-11-03T20:18:12.639630Z","iopub.status.idle":"2024-11-03T20:18:13.060764Z","shell.execute_reply.started":"2024-11-03T20:18:12.639588Z","shell.execute_reply":"2024-11-03T20:18:13.059566Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"print(len(dataset))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T20:18:13.062554Z","iopub.execute_input":"2024-11-03T20:18:13.063181Z","iopub.status.idle":"2024-11-03T20:18:13.070506Z","shell.execute_reply.started":"2024-11-03T20:18:13.063125Z","shell.execute_reply":"2024-11-03T20:18:13.069067Z"}},"outputs":[{"name":"stdout","text":"2269\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"import re\n\ndef trim_non_alphanumeric(s):\n    return re.sub(r'^\\W+|\\W+$', '', s)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T20:18:13.073931Z","iopub.execute_input":"2024-11-03T20:18:13.074815Z","iopub.status.idle":"2024-11-03T20:18:13.083221Z","shell.execute_reply.started":"2024-11-03T20:18:13.074757Z","shell.execute_reply":"2024-11-03T20:18:13.081429Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"vocab = set()\nfor V in dataset:\n    tokens = V[\"description\"].split(\" \")\n    tokens = [trim_non_alphanumeric(token) for token in tokens]\n    vocab.update(tokens)\nvocab = list(vocab)[1:]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T20:18:13.085202Z","iopub.execute_input":"2024-11-03T20:18:13.085677Z","iopub.status.idle":"2024-11-03T20:18:13.267479Z","shell.execute_reply.started":"2024-11-03T20:18:13.085624Z","shell.execute_reply":"2024-11-03T20:18:13.266175Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"vocab.sort()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T20:18:13.268749Z","iopub.execute_input":"2024-11-03T20:18:13.269202Z","iopub.status.idle":"2024-11-03T20:18:13.279461Z","shell.execute_reply.started":"2024-11-03T20:18:13.269159Z","shell.execute_reply":"2024-11-03T20:18:13.278219Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"vectorizer = tf.keras.layers.StringLookup(vocabulary=list(vocab))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T20:18:13.281296Z","iopub.execute_input":"2024-11-03T20:18:13.281725Z","iopub.status.idle":"2024-11-03T20:18:13.462088Z","shell.execute_reply.started":"2024-11-03T20:18:13.281682Z","shell.execute_reply":"2024-11-03T20:18:13.460798Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"x = vectorizer(list(vocab))\nx","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T20:18:13.463930Z","iopub.execute_input":"2024-11-03T20:18:13.464329Z","iopub.status.idle":"2024-11-03T20:18:13.636199Z","shell.execute_reply.started":"2024-11-03T20:18:13.464288Z","shell.execute_reply":"2024-11-03T20:18:13.634935Z"}},"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"<tf.Tensor: shape=(8841,), dtype=int64, numpy=array([   1,    2,    3, ..., 8839, 8840, 8841])>"},"metadata":{}}],"execution_count":9},{"cell_type":"code","source":"len(vocab)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T20:18:13.638138Z","iopub.execute_input":"2024-11-03T20:18:13.638612Z","iopub.status.idle":"2024-11-03T20:18:13.647516Z","shell.execute_reply.started":"2024-11-03T20:18:13.638561Z","shell.execute_reply":"2024-11-03T20:18:13.646214Z"}},"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"8841"},"metadata":{}}],"execution_count":10},{"cell_type":"code","source":"states = [\"B-ENV\", \"I-ENV\", \"B-ATTACK\", \"I-ATTACK\", \"B-ATTACK_VECTOR\", \"I-ATTACK_VECTOR\", \"B-PRE_REQ\", \"I-PRE_REQ\", \"B-OUTCOME\", \"I-OUTCOME\", \"O\"]\nn_states = len(states)\nn_states","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T20:18:13.655277Z","iopub.execute_input":"2024-11-03T20:18:13.656323Z","iopub.status.idle":"2024-11-03T20:18:13.665120Z","shell.execute_reply.started":"2024-11-03T20:18:13.656275Z","shell.execute_reply":"2024-11-03T20:18:13.663530Z"}},"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"11"},"metadata":{}}],"execution_count":11},{"cell_type":"code","source":"vectorizer_label = tf.keras.layers.StringLookup(vocabulary=states)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T20:18:13.666564Z","iopub.execute_input":"2024-11-03T20:18:13.666969Z","iopub.status.idle":"2024-11-03T20:18:13.681444Z","shell.execute_reply.started":"2024-11-03T20:18:13.666919Z","shell.execute_reply":"2024-11-03T20:18:13.679980Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"print(vectorizer_label(states))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T20:18:13.682940Z","iopub.execute_input":"2024-11-03T20:18:13.683363Z","iopub.status.idle":"2024-11-03T20:18:13.692480Z","shell.execute_reply.started":"2024-11-03T20:18:13.683321Z","shell.execute_reply":"2024-11-03T20:18:13.691218Z"}},"outputs":[{"name":"stdout","text":"tf.Tensor([ 1  2  3  4  5  6  7  8  9 10 11], shape=(11,), dtype=int64)\n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"X = []\ny = []\nfor V in dataset:\n    try:\n        annotated_tokens = V[\"labeled_description\"]\n        tokens = []\n        labels = []\n        for token in annotated_tokens:    \n            if (token[0] == ''):\n                continue\n            if (len(token) != 2):\n                continue\n            t = trim_non_alphanumeric(token[0])\n            if (t == ''):\n                continue\n            tokens.append(t)\n            labels.append(token[1])\n        X.append(tokens)\n        y.append(labels)\n    except Exception as e:\n            pass\n    # X.append(vectorizer(filtered_tokens))\n    # y.append(vectorizer_label(filtered_labels))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T20:18:13.693894Z","iopub.execute_input":"2024-11-03T20:18:13.694311Z","iopub.status.idle":"2024-11-03T20:18:13.929956Z","shell.execute_reply.started":"2024-11-03T20:18:13.694270Z","shell.execute_reply":"2024-11-03T20:18:13.928572Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"X = [tf.squeeze(vectorizer(x)) for x in X]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T20:18:13.931378Z","iopub.execute_input":"2024-11-03T20:18:13.931724Z","iopub.status.idle":"2024-11-03T20:18:17.013871Z","shell.execute_reply.started":"2024-11-03T20:18:13.931689Z","shell.execute_reply":"2024-11-03T20:18:17.012338Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"y = [vectorizer_label(labels) for labels in y]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T20:18:17.015656Z","iopub.execute_input":"2024-11-03T20:18:17.016085Z","iopub.status.idle":"2024-11-03T20:18:19.951303Z","shell.execute_reply.started":"2024-11-03T20:18:17.016042Z","shell.execute_reply":"2024-11-03T20:18:19.950274Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"X[0], y[0]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T20:18:19.952602Z","iopub.execute_input":"2024-11-03T20:18:19.952967Z","iopub.status.idle":"2024-11-03T20:18:19.960880Z","shell.execute_reply.started":"2024-11-03T20:18:19.952929Z","shell.execute_reply":"2024-11-03T20:18:19.959623Z"}},"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"(<tf.Tensor: shape=(22,), dtype=int64, numpy=\n array([1384, 5802, 7934, 4719, 8720, 6609, 3465, 2379, 4099, 2500, 5135,\n        8631, 4969, 7785, 5067, 6665, 5034, 2787, 7340, 3028, 8367, 6186])>,\n <tf.Tensor: shape=(22,), dtype=int64, numpy=\n array([11,  3,  4,  4, 11, 11,  1,  2,  2,  2,  2,  2, 11,  5,  6, 11,  9,\n        10, 10, 10, 11,  5])>)"},"metadata":{}}],"execution_count":17},{"cell_type":"code","source":"def prepare_data(sequences, labels):\n    \"\"\"\n    Convert sequences and labels to tensor format\n    \"\"\"\n    # Pad sequences to same length\n    max_len = max(len(seq) for seq in sequences)\n    padded_sequences = tf.keras.preprocessing.sequence.pad_sequences(\n        sequences, \n        maxlen=max_len, \n        padding='post'\n    )\n    padded_labels = tf.keras.preprocessing.sequence.pad_sequences(\n        labels,\n        maxlen=max_len,\n        padding='post'\n    )\n    \n    return padded_sequences, padded_labels","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T20:18:19.962569Z","iopub.execute_input":"2024-11-03T20:18:19.963089Z","iopub.status.idle":"2024-11-03T20:18:19.997914Z","shell.execute_reply.started":"2024-11-03T20:18:19.963035Z","shell.execute_reply":"2024-11-03T20:18:19.996359Z"}},"outputs":[],"execution_count":18},{"cell_type":"code","source":"X, y = prepare_data(X, y)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T20:18:19.999513Z","iopub.execute_input":"2024-11-03T20:18:19.999936Z","iopub.status.idle":"2024-11-03T20:18:21.406023Z","shell.execute_reply.started":"2024-11-03T20:18:19.999884Z","shell.execute_reply":"2024-11-03T20:18:21.404868Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T20:18:21.408547Z","iopub.execute_input":"2024-11-03T20:18:21.408935Z","iopub.status.idle":"2024-11-03T20:18:22.171963Z","shell.execute_reply.started":"2024-11-03T20:18:21.408898Z","shell.execute_reply":"2024-11-03T20:18:22.170403Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Split the training set into training and validation sets\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T20:18:22.173646Z","iopub.execute_input":"2024-11-03T20:18:22.174502Z","iopub.status.idle":"2024-11-03T20:18:22.197033Z","shell.execute_reply.started":"2024-11-03T20:18:22.174444Z","shell.execute_reply":"2024-11-03T20:18:22.195885Z"}},"outputs":[],"execution_count":21},{"cell_type":"code","source":"class HiddenMarkovModel(tf.keras.Model):\n    def __init__(self, n_states, n_observations):\n        super().__init__()\n        self.n_states = n_states\n        self.n_observations = n_observations\n        self.transition = tf.Variable(\n            tf.random.uniform([n_states + 1, n_states + 1]),\n            trainable=True,\n            name='transition'\n        )\n        self.emission = tf.Variable(\n            tf.random.uniform([n_states + 1, n_observations + 1]),\n            trainable=True,\n            name='emission'\n        )\n        self.initial = tf.Variable(\n            tf.random.uniform([n_states + 1]),\n            trainable=True,\n            name='initial'\n        )\n        # self.trainable_variables = [self.transition, self.emission, self.initial]\n\n    def get_probabilities(self):\n        # Convert to proper probability distributions using softmax\n        transition_prob = tf.nn.softmax(self.transition)\n        emission_prob = tf.nn.softmax(self.emission)\n        initial_prob = tf.nn.softmax(self.initial)\n        return transition_prob, emission_prob, initial_prob\n\n    def test(self):\n        print(self.trainable_variables)\n    \n    def forward(self, observations):\n        transition_prob, emission_prob, initial_prob = self.get_probabilities()\n        alpha = tf.zeros([observations.shape[0], self.n_states + 1])\n        alpha = tf.tensor_scatter_nd_update(alpha, [[0]], [initial_prob * self.emission[:, observations[0]]])\n        len_obs = observations.shape[0]\n        for t in range(1, len_obs):\n            prev_alpha = alpha[t-1]\n            curr_emission = emission_prob[:, observations[t]]\n            \n            curr_alpha = tf.reduce_sum(\n                tf.expand_dims(prev_alpha, 1) * transition_prob, \n                axis=0\n            ) * curr_emission\n            \n            alpha = tf.tensor_scatter_nd_update(\n                alpha,\n                [[t]],\n                [curr_alpha]\n            )\n        return alpha\n\n    @tf.function\n    def viterbi(self, observations):\n        transition_prob, emission_prob, initial_prob = self.get_probabilities()\n        \n        # Initialize variables\n        T = observations.shape[0]\n        N = self.initial.shape[0]\n        \n        # Initialize viterbi and backpointer matrices\n        viterbi_matrix = tf.zeros([T, N])\n        backpointer = tf.zeros([T, N], dtype=tf.int32)\n        \n        # Initialize first step\n        viterbi_matrix = tf.tensor_scatter_nd_update(\n            viterbi_matrix,\n            [[0]],\n            [tf.math.log(initial_prob) + tf.math.log(emission_prob[:, observations[0]])]\n        )\n        \n        # Viterbi algorithm\n        for t in range(1, T):\n            for s in range(N):\n                # Compute probabilities for each possible previous state\n                probs = (\n                    viterbi_matrix[t-1] + \n                    tf.math.log(transition_prob[:, s]) + \n                    tf.math.log(emission_prob[s, observations[t]])\n                )\n                \n                # Update viterbi matrix and backpointer\n                best_prev_state = tf.argmax(probs)\n                viterbi_matrix = tf.tensor_scatter_nd_update(\n                    viterbi_matrix,\n                    [[t, s]],\n                    [probs[best_prev_state]]\n                )\n                backpointer = tf.tensor_scatter_nd_update(\n                    backpointer,\n                    [[t, s]],\n                    [best_prev_state]\n                )\n        \n        # Backtrack to find best path\n        best_path = tf.zeros(T, dtype=tf.int32)\n        best_path = tf.tensor_scatter_nd_update(\n            best_path,\n            [[T-1]],\n            [tf.argmax(viterbi_matrix[T-1])]\n        )\n        \n        for t in range(T-2, -1, -1):\n            best_path = tf.tensor_scatter_nd_update(\n                best_path,\n                [[t]],\n                [backpointer[t+1, best_path[t+1]]]\n            )\n            \n        return best_path\n    \n    def call(self, inputs):\n        return tf.map_fn(self.viterbi, inputs)\n\n    \n    @tf.function\n    def neg_log_loss(self, x, y, **kwargs):\n        transition_prob, emission_prob, initial_prob = self.get_probabilities()\n        \n        # Create mask for valid (non-padded) positions\n        mask = tf.cast(tf.not_equal(x, 0), tf.float32)\n        sequence_length = tf.cast(tf.reduce_sum(mask), tf.int32)\n        \n        # Initial state probabilities\n        initial_loss = -tf.math.log(initial_prob[y[0]])\n        \n        # Transition probabilities\n        transition_loss = 0.0\n        for t in range(1, sequence_length):\n            transition_loss -= tf.math.log(\n                transition_prob[y[t-1], y[t]]\n            )\n        \n        # Emission probabilities\n        emission_loss = 0.0\n        for t in range(sequence_length):\n            emission_loss -= tf.math.log(\n                emission_prob[y[t], x[t]]\n            )\n        \n        total_loss = initial_loss + transition_loss + emission_loss\n        return total_loss\n\n    @tf.function\n    def compute_loss(self, x, y, **kwargs):\n        individual_losses = tf.map_fn(\n            lambda data: self.neg_log_loss(data[0], data[1]),\n            (x, y),\n            fn_output_signature=tf.float32\n        )\n        return tf.reduce_sum(individual_losses)\n    \n    @tf.function\n    def train_step(self, data):\n        batch_observations, batch_true_states = data\n        \n        with tf.GradientTape() as tape:\n            # individual_losses = tf.map_fn(\n            #     lambda x: self.compute_loss(x[0], x[1]),\n            #     (batch_observations, batch_true_states),\n            #     fn_output_signature=tf.float32\n            # )\n            # # Compute supervised loss for the entire sequence\n            # loss = tf.reduce_sum(individual_losses)\n            loss = self.compute_loss(x=batch_observations, y = batch_true_states)\n        # Compute gradients\n        gradients = tape.gradient(loss, [self.transition, self.emission, self.initial])\n        # Apply gradients\n        self.optimizer.apply_gradients(zip(gradients,[self.transition, self.emission, self.initial]))\n        \n        return {\"loss\": loss}\n        \n        ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T21:03:19.086149Z","iopub.execute_input":"2024-11-03T21:03:19.086613Z","iopub.status.idle":"2024-11-03T21:03:19.114319Z","shell.execute_reply.started":"2024-11-03T21:03:19.086568Z","shell.execute_reply":"2024-11-03T21:03:19.112973Z"}},"outputs":[],"execution_count":42},{"cell_type":"code","source":"X.shape, y.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T21:03:19.750039Z","iopub.execute_input":"2024-11-03T21:03:19.750512Z","iopub.status.idle":"2024-11-03T21:03:19.759890Z","shell.execute_reply.started":"2024-11-03T21:03:19.750467Z","shell.execute_reply":"2024-11-03T21:03:19.757687Z"}},"outputs":[{"execution_count":43,"output_type":"execute_result","data":{"text/plain":"((2269, 399), (2269, 399))"},"metadata":{}}],"execution_count":43},{"cell_type":"code","source":"hmm = HiddenMarkovModel(n_states, len(vocab))\nfwd = hmm.forward(tf.Variable([0, 1, 2]))\nfwd","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T21:03:20.918249Z","iopub.execute_input":"2024-11-03T21:03:20.918669Z","iopub.status.idle":"2024-11-03T21:03:20.942322Z","shell.execute_reply.started":"2024-11-03T21:03:20.918623Z","shell.execute_reply":"2024-11-03T21:03:20.941082Z"}},"outputs":[{"execution_count":44,"output_type":"execute_result","data":{"text/plain":"<tf.Tensor: shape=(3, 12), dtype=float32, numpy=\narray([[7.3119588e-03, 6.3451640e-02, 2.9622680e-02, 8.6805731e-02,\n        8.1213884e-02, 4.8498947e-02, 1.0036515e-01, 1.0490326e-02,\n        7.9703897e-02, 3.9828788e-02, 3.9212938e-02, 2.5667800e-02],\n       [3.2678511e-06, 4.7938024e-06, 6.8595577e-06, 3.1340101e-06,\n        7.4519699e-06, 6.0570960e-06, 5.9760669e-06, 4.9355672e-06,\n        7.6494562e-06, 3.9085867e-06, 5.0234639e-06, 7.3605197e-06],\n       [5.9650651e-10, 8.6027785e-10, 7.0556949e-10, 5.7691302e-10,\n        6.9664591e-10, 1.0299186e-09, 6.3127187e-10, 4.1999176e-10,\n        4.8341997e-10, 5.6100879e-10, 4.7743942e-10, 3.3667530e-10]],\n      dtype=float32)>"},"metadata":{}}],"execution_count":44},{"cell_type":"code","source":"tf.config.run_functions_eagerly(True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T21:03:22.363713Z","iopub.execute_input":"2024-11-03T21:03:22.364171Z","iopub.status.idle":"2024-11-03T21:03:22.370273Z","shell.execute_reply.started":"2024-11-03T21:03:22.364106Z","shell.execute_reply":"2024-11-03T21:03:22.368930Z"}},"outputs":[],"execution_count":45},{"cell_type":"code","source":"hmm.test()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T21:03:23.520440Z","iopub.execute_input":"2024-11-03T21:03:23.520868Z","iopub.status.idle":"2024-11-03T21:03:23.526692Z","shell.execute_reply.started":"2024-11-03T21:03:23.520807Z","shell.execute_reply":"2024-11-03T21:03:23.525538Z"}},"outputs":[{"name":"stdout","text":"[]\n","output_type":"stream"}],"execution_count":46},{"cell_type":"code","source":"tf.Variable([[0, 1, 2]]).shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T21:05:26.830918Z","iopub.execute_input":"2024-11-03T21:05:26.831315Z","iopub.status.idle":"2024-11-03T21:05:26.841739Z","shell.execute_reply.started":"2024-11-03T21:05:26.831279Z","shell.execute_reply":"2024-11-03T21:05:26.840437Z"}},"outputs":[{"execution_count":51,"output_type":"execute_result","data":{"text/plain":"TensorShape([1, 3])"},"metadata":{}}],"execution_count":51},{"cell_type":"code","source":"loss = hmm.compute_loss(x = tf.Variable([[0, 1, 2]]), y = tf.Variable([[0, 1, 0]]))\nloss","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T21:06:09.021482Z","iopub.execute_input":"2024-11-03T21:06:09.021954Z","iopub.status.idle":"2024-11-03T21:06:09.045175Z","shell.execute_reply.started":"2024-11-03T21:06:09.021911Z","shell.execute_reply":"2024-11-03T21:06:09.043999Z"}},"outputs":[{"execution_count":53,"output_type":"execute_result","data":{"text/plain":"<tf.Tensor: shape=(), dtype=float32, numpy=24.662458>"},"metadata":{}}],"execution_count":53},{"cell_type":"code","source":"tf.config.run_functions_eagerly(False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T21:06:10.167735Z","iopub.execute_input":"2024-11-03T21:06:10.168194Z","iopub.status.idle":"2024-11-03T21:06:10.173616Z","shell.execute_reply.started":"2024-11-03T21:06:10.168152Z","shell.execute_reply":"2024-11-03T21:06:10.172272Z"}},"outputs":[],"execution_count":54},{"cell_type":"code","source":"hmm.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.01))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T21:06:11.917697Z","iopub.execute_input":"2024-11-03T21:06:11.918199Z","iopub.status.idle":"2024-11-03T21:06:11.931263Z","shell.execute_reply.started":"2024-11-03T21:06:11.918152Z","shell.execute_reply":"2024-11-03T21:06:11.929714Z"}},"outputs":[],"execution_count":55},{"cell_type":"code","source":"hmm.summary()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T21:06:13.234149Z","iopub.execute_input":"2024-11-03T21:06:13.234621Z","iopub.status.idle":"2024-11-03T21:06:13.254240Z","shell.execute_reply.started":"2024-11-03T21:06:13.234571Z","shell.execute_reply":"2024-11-03T21:06:13.253074Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"hidden_markov_model_2\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"hidden_markov_model_2\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}}],"execution_count":56},{"cell_type":"code","source":"hmm.fit(X_train, y_train, epochs=20, validation_data=(X_val, y_val))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T21:06:14.483473Z","iopub.execute_input":"2024-11-03T21:06:14.484418Z","iopub.status.idle":"2024-11-03T21:22:45.283630Z","shell.execute_reply.started":"2024-11-03T21:06:14.484365Z","shell.execute_reply":"2024-11-03T21:22:45.281948Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/20\n\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m331s\u001b[0m 7s/step - loss: 14768.7002 - val_loss: 14118.8232\nEpoch 2/20\n\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m34s\u001b[0m 742ms/step - loss: 13254.3936 - val_loss: 12834.2217\nEpoch 3/20\n\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m34s\u001b[0m 741ms/step - loss: 12041.0889 - val_loss: 11835.8398\nEpoch 4/20\n\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m34s\u001b[0m 748ms/step - loss: 11109.4424 - val_loss: 11092.4355\nEpoch 5/20\n\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m33s\u001b[0m 739ms/step - loss: 10402.0879 - val_loss: 10530.6230\nEpoch 6/20\n\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 746ms/step - loss: 9860.0020 - val_loss: 10103.0264\nEpoch 7/20\n\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m34s\u001b[0m 745ms/step - loss: 9445.7305 - val_loss: 9786.6719\nEpoch 8/20\n\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m34s\u001b[0m 747ms/step - loss: 9132.8555 - val_loss: 9553.8564\nEpoch 9/20\n\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m33s\u001b[0m 736ms/step - loss: 8902.6357 - val_loss: 9384.8867\nEpoch 10/20\n\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m33s\u001b[0m 736ms/step - loss: 8733.0732 - val_loss: 9271.0859\nEpoch 11/20\n\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m33s\u001b[0m 734ms/step - loss: 8614.1553 - val_loss: 9190.8701\nEpoch 12/20\n\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m34s\u001b[0m 744ms/step - loss: 8527.1123 - val_loss: 9139.7695\nEpoch 13/20\n\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m34s\u001b[0m 745ms/step - loss: 8465.5518 - val_loss: 9104.0752\nEpoch 14/20\n\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m34s\u001b[0m 741ms/step - loss: 8422.3584 - val_loss: 9081.0996\nEpoch 15/20\n\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m34s\u001b[0m 748ms/step - loss: 8388.7715 - val_loss: 9066.8721\nEpoch 16/20\n\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m35s\u001b[0m 765ms/step - loss: 8363.5244 - val_loss: 9057.4355\nEpoch 17/20\n\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m35s\u001b[0m 773ms/step - loss: 8343.6182 - val_loss: 9050.3262\nEpoch 18/20\n\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m36s\u001b[0m 787ms/step - loss: 8327.6670 - val_loss: 9046.2461\nEpoch 19/20\n\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m35s\u001b[0m 772ms/step - loss: 8313.6777 - val_loss: 9043.7285\nEpoch 20/20\n\u001b[1m46/46\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 765ms/step - loss: 8302.3330 - val_loss: 9043.4463\n","output_type":"stream"},{"execution_count":57,"output_type":"execute_result","data":{"text/plain":"<keras.src.callbacks.history.History at 0x7b35d2049ab0>"},"metadata":{}}],"execution_count":57},{"cell_type":"code","source":"import pickle\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T21:33:42.085835Z","iopub.execute_input":"2024-11-03T21:33:42.086457Z","iopub.status.idle":"2024-11-03T21:33:42.093942Z","shell.execute_reply.started":"2024-11-03T21:33:42.086395Z","shell.execute_reply":"2024-11-03T21:33:42.092176Z"}},"outputs":[],"execution_count":58},{"cell_type":"code","source":"with open('/kaggle/working/hmm_initial.pkl', \"wb\") as f: pickle.dump(hmm.initial, f, pickle.HIGHEST_PROTOCOL)\nwith open('/kaggle/working/hmm_emission.pkl', \"wb\") as f: pickle.dump(hmm.emission, f, pickle.HIGHEST_PROTOCOL)\nwith open('/kaggle/working/hmm_transition.pkl', \"wb\") as f: pickle.dump(hmm.transition, f, pickle.HIGHEST_PROTOCOL)\nwith open('/kaggle/working/vectorizer_tokens.pkl', \"wb\") as f: pickle.dump(vectorizer, f, pickle.HIGHEST_PROTOCOL)\nwith open('/kaggle/working/vectorizer_label.pkl', \"wb\") as f: pickle.dump(vectorizer_label, f, pickle.HIGHEST_PROTOCOL)\nwith open('/kaggle/working/vocab_tokens.pkl', \"wb\") as f: pickle.dump(vectorizer.get_vocabulary(), f, pickle.HIGHEST_PROTOCOL)\nwith open('/kaggle/working/vocab_labels.pkl', \"wb\") as f: pickle.dump(vectorizer_label.get_vocabulary(), f, pickle.HIGHEST_PROTOCOL)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T21:45:49.324764Z","iopub.execute_input":"2024-11-03T21:45:49.325334Z","iopub.status.idle":"2024-11-03T21:45:49.484070Z","shell.execute_reply.started":"2024-11-03T21:45:49.325276Z","shell.execute_reply":"2024-11-03T21:45:49.482462Z"}},"outputs":[],"execution_count":66},{"cell_type":"code","source":"with open('/kaggle/working/hmm_initial.pkl', \"rb\") as f: initial = pickle.load(f)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T21:46:10.194607Z","iopub.execute_input":"2024-11-03T21:46:10.195130Z","iopub.status.idle":"2024-11-03T21:46:10.203161Z","shell.execute_reply.started":"2024-11-03T21:46:10.195085Z","shell.execute_reply":"2024-11-03T21:46:10.201787Z"}},"outputs":[],"execution_count":67},{"cell_type":"code","source":"print(initial)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T21:47:22.888622Z","iopub.execute_input":"2024-11-03T21:47:22.889086Z","iopub.status.idle":"2024-11-03T21:47:22.897847Z","shell.execute_reply.started":"2024-11-03T21:47:22.889039Z","shell.execute_reply":"2024-11-03T21:47:22.896259Z"}},"outputs":[{"name":"stdout","text":"<tf.Variable 'initial:0' shape=(12,) dtype=float32, numpy=\narray([-2.910816 ,  2.2098832, -2.81262  ,  1.3809098, -2.220586 ,\n       -2.4743767, -2.216754 , -1.7591146, -2.4498906, -2.2235096,\n       -2.8237755,  2.9321368], dtype=float32)>\n","output_type":"stream"}],"execution_count":71},{"cell_type":"code","source":"print(hmm.initial)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T21:47:30.742946Z","iopub.execute_input":"2024-11-03T21:47:30.743403Z","iopub.status.idle":"2024-11-03T21:47:30.752281Z","shell.execute_reply.started":"2024-11-03T21:47:30.743359Z","shell.execute_reply":"2024-11-03T21:47:30.750645Z"}},"outputs":[{"name":"stdout","text":"<tf.Variable 'initial:0' shape=(12,) dtype=float32, numpy=\narray([-2.910816 ,  2.2098832, -2.81262  ,  1.3809098, -2.220586 ,\n       -2.4743767, -2.216754 , -1.7591146, -2.4498906, -2.2235096,\n       -2.8237755,  2.9321368], dtype=float32)>\n","output_type":"stream"}],"execution_count":72},{"cell_type":"code","source":"vocab_tokens = vectorizer.get_vocabulary()\nvocab_labels = vectorizer_label.get_vocabulary()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T21:53:10.976776Z","iopub.execute_input":"2024-11-03T21:53:10.977275Z","iopub.status.idle":"2024-11-03T21:53:11.025413Z","shell.execute_reply.started":"2024-11-03T21:53:10.977229Z","shell.execute_reply":"2024-11-03T21:53:11.023815Z"}},"outputs":[],"execution_count":78},{"cell_type":"code","source":"mask = tf.cast(tf.not_equal(X_test[0], 0), tf.float32)\ndescription = [vocab_tokens[s] for s in tf.boolean_mask(X_test[0], mask)]\ndescription","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T21:58:43.065353Z","iopub.execute_input":"2024-11-03T21:58:43.065836Z","iopub.status.idle":"2024-11-03T21:58:43.121073Z","shell.execute_reply.started":"2024-11-03T21:58:43.065780Z","shell.execute_reply":"2024-11-03T21:58:43.119748Z"}},"outputs":[{"execution_count":82,"output_type":"execute_result","data":{"text/plain":"['The',\n 'eBay',\n 'Kleinanzeigen',\n 'for',\n 'Germany',\n 'aka',\n 'com.ebay.kleinanzeigen',\n 'application',\n '5.0.2',\n 'for',\n 'Android',\n 'does',\n 'not',\n 'verify',\n 'X.509',\n 'certificates',\n 'from',\n 'SSL',\n 'servers',\n 'which',\n 'allows',\n 'man-in-the-middle',\n 'attackers',\n 'to',\n 'spoof',\n 'servers',\n 'and',\n 'obtain',\n 'sensitive',\n 'information',\n 'via',\n 'a',\n 'crafted',\n 'certificate']"},"metadata":{}}],"execution_count":82},{"cell_type":"code","source":"y_pred = hmm.viterbi(X_test[0])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T21:50:43.436363Z","iopub.execute_input":"2024-11-03T21:50:43.436815Z","iopub.status.idle":"2024-11-03T21:50:43.678741Z","shell.execute_reply.started":"2024-11-03T21:50:43.436771Z","shell.execute_reply":"2024-11-03T21:50:43.677305Z"}},"outputs":[],"execution_count":74},{"cell_type":"code","source":"true_labels = [vocab_labels[s] for s in tf.boolean_mask(y_test[0], mask)]\ntrue_labels","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T21:59:56.280629Z","iopub.execute_input":"2024-11-03T21:59:56.281242Z","iopub.status.idle":"2024-11-03T21:59:56.311517Z","shell.execute_reply.started":"2024-11-03T21:59:56.281167Z","shell.execute_reply":"2024-11-03T21:59:56.310147Z"}},"outputs":[{"execution_count":83,"output_type":"execute_result","data":{"text/plain":"['O',\n 'B-ENV',\n 'I-ENV',\n 'I-ENV',\n 'I-ENV',\n 'O',\n 'B-ENV',\n 'O',\n 'B-ENV',\n 'I-ENV',\n 'I-ENV',\n 'O',\n 'O',\n 'O',\n 'B-ATTACK',\n 'I-ATTACK',\n 'O',\n 'B-ATTACK',\n 'I-ATTACK',\n 'O',\n 'O',\n 'B-ATTACK_VECTOR',\n 'I-ATTACK_VECTOR',\n 'O',\n 'O',\n 'O',\n 'O',\n 'O',\n 'B-OUTCOME',\n 'I-OUTCOME',\n 'O',\n 'O',\n 'B-ATTACK_VECTOR',\n 'I-ATTACK_VECTOR']"},"metadata":{}}],"execution_count":83},{"cell_type":"code","source":"pred_labels = [vocab_labels[s] for s in tf.boolean_mask(y_pred, mask)]\npred_labels","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-03T22:00:23.735365Z","iopub.execute_input":"2024-11-03T22:00:23.735813Z","iopub.status.idle":"2024-11-03T22:00:23.765243Z","shell.execute_reply.started":"2024-11-03T22:00:23.735772Z","shell.execute_reply":"2024-11-03T22:00:23.763792Z"}},"outputs":[{"execution_count":84,"output_type":"execute_result","data":{"text/plain":"['O',\n 'B-ENV',\n 'I-ENV',\n 'I-ENV',\n 'I-ENV',\n 'I-ENV',\n 'I-ENV',\n 'I-ENV',\n 'I-ENV',\n 'I-ENV',\n 'I-ENV',\n 'O',\n 'O',\n 'O',\n 'B-ATTACK',\n 'I-ATTACK',\n 'I-ATTACK',\n 'I-ATTACK',\n 'I-ATTACK',\n 'O',\n 'O',\n 'B-ATTACK_VECTOR',\n 'I-ATTACK_VECTOR',\n 'O',\n 'O',\n 'O',\n 'O',\n 'O',\n 'B-OUTCOME',\n 'I-OUTCOME',\n 'O',\n 'O',\n 'B-ATTACK_VECTOR',\n 'I-ATTACK_VECTOR']"},"metadata":{}}],"execution_count":84},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}